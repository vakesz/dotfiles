#!/usr/bin/env bash
set -euo pipefail

trap 'printf "\033[1;31m[dotfiles]\033[0m Failed at %s:%s\n" "${BASH_SOURCE[0]}" "${LINENO}" >&2' ERR

### ─────────────────────────  CONFIG  ─────────────────────────
REPO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
IS_ROOT=${EUID:-$(id -u)}
DISTRO=""
FONT_NAME="JetBrainsMono"
NERD_FONT_URL="https://github.com/ryanoasis/nerd-fonts/releases/latest/download/${FONT_NAME}.zip"

# Track whether we changed APT sources; if yes, do a single update before install
UPDATED_APT=0

APT_PKGS=(
  # essentials
  git curl wget unzip zip tar ca-certificates gnupg lsb-release software-properties-common apt-transport-https
  # shells & utils
  zsh lsd fzf mc tldr tig httpie nmap tree htop jq ripgrep fd-find
  # compilers & build
  build-essential gcc g++ clang llvm cmake make ninja-build pkg-config autoconf automake
  # scripting / langs
  python3 python3-pip python3-venv pipx lua5.4
  # java
  openjdk-21-jdk
  # format/lint
  shellcheck clang-format
  # fonts cache for Nerd Fonts
  fontconfig
)

# npm globals
NPM_GLOBALS=(prettier eslint)

# pipx tools
PIPX_TOOLS=(pre-commit black ruff pytest)

# cargo tools
CARGO_TOOLS=(topgrade)

### ───────────────────────  UTIL HELPERS  ─────────────────────
log()   { printf "\033[1;34m[dotfiles]\033[0m %s\n" "$*"; }
warn()  { printf "\033[1;33m[dotfiles]\033[0m %s\n" "$*"; }
error() { printf "\033[1;31m[dotfiles]\033[0m %s\n" "$*" >&2; }

need_cmd() { command -v "$1" >/dev/null 2>&1; }

require_sudo() {
  if [ "${EUID:-$(id -u)}" -ne 0 ]; then
    if ! command -v sudo >/dev/null 2>&1; then
      error "sudo is required when not running as root."; exit 1
    fi
    sudo -v || { error "This script needs sudo privileges."; exit 1; }
  fi
}

detect_distro() {
  if [ -r /etc/os-release ]; then
    . /etc/os-release
    DISTRO="${ID:-}"
  fi
  case "${DISTRO}" in
    ubuntu|debian) ;;
    *) error "Unsupported distro: ${DISTRO:-unknown}"; exit 1 ;;
  esac
  log "Detected distro: $DISTRO"
}

apt_update_once() {
  sudo apt-get update -y
}

apt_update_if_needed() {
  if [ "$UPDATED_APT" -eq 1 ]; then
    sudo apt-get update -y
    UPDATED_APT=0
  fi
}

apt_install() {
  sudo apt-get install -y --no-install-recommends "$@"
}

ensure_dir() {
  mkdir -p "$1"
}

ensure_cmd_pkg() { need_cmd "$1" || apt_install "$2"; }

add_apt_source() {
  # $1=name, $2=list_line, $3=key_path (optional), $4=key_url (optional)
  local name="$1" list="$2" key_path="${3:-}" key_url="${4:-}"
  if [ -n "$key_url" ] && [ ! -s "$key_path" ]; then
    sudo install -m 0755 -d "$(dirname "$key_path")"
    curl -fsSL "$key_url" | sudo gpg --dearmor -o "$key_path"
    sudo chmod a+r "$key_path" || true
  fi
  local list_file="/etc/apt/sources.list.d/${name}.list"
  if [ ! -f "$list_file" ] || ! grep -qxF "$list" "$list_file"; then
    echo "$list" | sudo tee "$list_file" >/dev/null
    UPDATED_APT=1
  fi
}

is_wsl() {
  grep -qi microsoft /proc/sys/kernel/osrelease 2>/dev/null
}

is_wsl2() {
  if grep -qi microsoft /proc/sys/kernel/osrelease 2>/dev/null; then
    grep -qiE 'WSL2|microsoft-standard-WSL2' /proc/sys/kernel/osrelease 2>/dev/null
  else
    return 1
  fi
}

### ───────────────────  APT & BASE PACKAGES  ──────────────────
install_apt_basics() {
  log "Installing base apt packages…"
  apt_update_once
  apt_install "${APT_PKGS[@]}"
}

### ─────────────────────  SYMLINK DOTFILES  ───────────────────
_same_link() { [ -L "$2" ] && [ "$(readlink -f "$2")" = "$(readlink -f "$1")" ]; }

symlink_dotfiles() {
  log "Symlinking dotfiles…"
  ensure_dir "${HOME}/.config"
  link() {
    local src="$1" dst="$2"
    ensure_dir "$(dirname "$dst")"
    if ! _same_link "$src" "$dst"; then
      rm -f "$dst"
      ln -sfn "$src" "$dst"
      log "→ $dst → $src"
    fi
  }
  for f in .gitconfig .zshrc .p10k.zsh .profile; do
    [ -f "${REPO_DIR}/${f}" ] && link "${REPO_DIR}/${f}" "${HOME}/${f}"
  done
  if [ -d "${REPO_DIR}/.config" ]; then
    shopt -s dotglob
    for item in "${REPO_DIR}/.config"/*; do
      [ -e "$item" ] || continue
      link "$item" "${HOME}/.config/$(basename "$item")"
    done
    shopt -u dotglob
  fi
}

### ────────────────────  NERD FONT INSTALL  ───────────────────
install_nerd_font() {
  log "Installing Nerd Font (${FONT_NAME})…"
  local font_dir="${HOME}/.local/share/fonts"
  ensure_dir "$font_dir"
  if find "$font_dir" -maxdepth 1 -type f -name "${FONT_NAME}*.ttf" | grep -q .; then
    log "Nerd Font (${FONT_NAME}) already present. Skipping."
    return
  fi
  local tmp_zip
  tmp_zip="$(mktemp)"
  curl -fsSL "$NERD_FONT_URL" -o "$tmp_zip"
  unzip -oq "$tmp_zip" -d "$font_dir"
  rm -f "$tmp_zip"
  fc-cache -f >/dev/null 2>&1 || true
  log "Nerd Font installed to ${font_dir}"
}

### ──────────────────  ZSH & OH-MY-ZSH SETUP  ─────────────────
install_oh_my_zsh() { install_ohmyzsh; }

install_ohmyzsh() {
  if [ -d "${HOME}/.oh-my-zsh" ]; then
    log "Oh My Zsh already present. Skipping."
  else
    log "Installing Oh My Zsh…"
    RUNZSH="no" KEEP_ZSHRC="yes" CHSH="no" sh -c \
      "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  fi
}

setup_zsh() {
  ensure_cmd_pkg zsh zsh
  install_ohmyzsh

  if [ ! -d "$HOME/.zplug" ]; then
    log "Cloning zplug (Zsh plugin manager)…"
    git clone https://github.com/zplug/zplug "$HOME/.zplug"
  fi

  # Schedule weekly Zsh history rotation & compression (keeps >30d gzipped)
  if ! crontab -l 2>/dev/null | grep -q "history.*gzip"; then
    log "Scheduling weekly Zsh history rotation and compression"
    (crontab -l 2>/dev/null; \
      echo "0 3 * * 0 /usr/bin/find \$HOME/.local/state/zsh -name 'history-*' -mtime +30 -exec gzip {} \;") | crontab -
  fi
}

### ───────────────────────  NODE.JS  ─────────────────────────
ensure_npm_user_prefix() {
  local current
  current="$(npm config get prefix 2>/dev/null || true)"
  if [ "$current" = "/usr" ] || [ "$current" = "/usr/local" ] || [ -z "$current" ]; then
    mkdir -p "$HOME/.local"
    npm config set prefix "$HOME/.local"
    log "Configured npm global prefix → $HOME/.local"
  fi
}

install_node() {
  if ! need_cmd node; then
    local node_key="/etc/apt/keyrings/nodesource.gpg"
    local node_list="deb [signed-by=${node_key}] https://deb.nodesource.com/node_22.x $(lsb_release -cs) main"
    add_apt_source "nodesource" "$node_list" "$node_key" "https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key"
    apt_update_if_needed
    apt_install nodejs
  else
    log "Node $(node -v) already installed."
  fi
  ensure_npm_user_prefix
  export PATH="$HOME/.local/bin:$PATH"
  if ! need_cmd corepack; then npm i -g corepack || true; fi
  corepack enable || true
  corepack prepare pnpm@latest --activate || true
  for pkg in "${NPM_GLOBALS[@]}"; do
    if ! npm ls -g --depth=0 "$pkg" >/dev/null 2>&1; then
      npm i -g "$pkg"
    fi
  done
}

### ────────────────────────  RUST  ────────────────────────────
install_rust() {
  if need_cmd rustup; then
    rustup self update && rustup update || true
  else
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    # shellcheck disable=SC1091
    source "${HOME}/.cargo/env"
  fi
  for crate in "${CARGO_TOOLS[@]}"; do
    if ! cargo install --list 2>/dev/null | grep -q "^${crate} "; then
      cargo install "$crate"
    fi
  done
}

### ───────────────────────  PYTHON TOOLS  ─────────────────────
install_python_tools() {
  python3 -m pip install -U pip >/dev/null 2>&1 || true
  apt_install pipx || true
  pipx ensurepath || true
  for tool in "${PIPX_TOOLS[@]}"; do
    pipx install --force "$tool" || true
  done
}

### ───────────────────────────  GO (LATEST)  ───────────────────────────
install_go() {
  local arch dpkg_arch version tgz url tmp

  ensure_cmd_pkg curl curl

  version="$(curl -fsSL https://go.dev/VERSION?m=text | head -n1)" # e.g., go1.22.6
  if [ -z "$version" ]; then
    error "Could not determine latest Go version"; return 1
  fi

  dpkg_arch="$(dpkg --print-architecture)"
  case "$dpkg_arch" in
    amd64) arch="amd64" ;;
    arm64) arch="arm64" ;;
    *) error "Unsupported arch for Go: ${dpkg_arch}"; return 1 ;;
  esac

  tgz="${version}.linux-${arch}.tar.gz"
  url="https://go.dev/dl/${tgz}"

  if need_cmd go && go version 2>/dev/null | grep -q " ${version} "; then
    log "Go ${version} already installed."
    return 0
  fi

  log "Installing Go ${version}…"
  tmp="$(mktemp -d)"
  curl -fL "$url" -o "${tmp}/${tgz}"
  sudo rm -rf /usr/local/go
  sudo tar -C /usr/local -xzf "${tmp}/${tgz}"
  rm -rf "$tmp"

  if ! need_cmd go; then
    export PATH="/usr/local/go/bin:${PATH}"
  fi
  log "Installed $(go version)"
}

### ──────────────────────────  ZIG (LATEST)  ───────────────────────────
install_zig() {
  local platform version url tmp index_json

  ensure_cmd_pkg jq jq
  ensure_cmd_pkg curl curl

  case "$(dpkg --print-architecture)" in
    amd64)  platform="x86_64-linux" ;;
    arm64)  platform="aarch64-linux" ;;
    *) error "Unsupported arch for Zig"; return 1 ;;
  esac

  index_json="$(curl -fsSL https://ziglang.org/download/index.json)"
  if [ -z "$index_json" ]; then
    error "Could not fetch Zig index"; return 1
  fi

  version="$(printf '%s' "$index_json" | jq -r 'keys[]' | grep -E '^[0-9]+\.[0-9]+' | sort -Vr | head -n1)"
  if [ -z "$version" ] || [ "$version" = "null" ]; then
    error "Could not determine latest Zig stable version"; return 1
  fi

  url="$(printf '%s' "$index_json" | jq -r --arg v "$version" --arg p "$platform" '.[$v][$p].tarball // empty')"
  if [ -z "$url" ]; then
    error "No Zig tarball for platform ${platform} in version ${version}"; return 1
  fi

  if need_cmd zig && [ "$(zig version 2>/dev/null)" = "$version" ]; then
    log "Zig ${version} already installed."
    return 0
  fi

  tmp="$(mktemp -d)"
  log "Installing Zig ${version} (${platform})…"
  if ! curl -fL "$url" -o "${tmp}/zig.tar.xz"; then
    rm -rf "$tmp"
    error "Failed to download Zig from ${url}"; return 1
  fi
  sudo rm -rf /opt/zig
  sudo mkdir -p /opt/zig
  sudo tar -C /opt/zig -xJf "${tmp}/zig.tar.xz" --strip-components=1
  rm -rf "$tmp"

  sudo ln -sf /opt/zig/zig /usr/local/bin/zig
  log "Installed Zig: $(/usr/local/bin/zig version 2>/dev/null || echo 'ok')"
}

### ─────────────────────────  DENO (LATEST)  ───────────────────────────
install_deno() {
  if need_cmd deno; then
    log "Upgrading Deno to latest…"
    deno upgrade || true
  else
    log "Installing Deno via official APT repository…"
    local deno_key="/etc/apt/keyrings/deno.gpg"
    local deno_list="deb [signed-by=${deno_key}] https://dl.deno.land/apt stable main"
    add_apt_source "deno" "$deno_list" "$deno_key" "https://dl.deno.land/deno.asc"
    apt_update_if_needed
    apt_install deno
  fi
  log "Deno version: $(deno --version 2>/dev/null | head -n1 || echo 'installed')"
}

### ─────────────────────  DOCKER ENGINE  ──────────────────────
install_docker() {
  if need_cmd docker; then return; fi
  local docker_key="/etc/apt/keyrings/docker.gpg"
  local arch="$(dpkg --print-architecture)"
  local codename; codename="$(. /etc/os-release; echo "$VERSION_CODENAME")"
  local docker_list="deb [arch=${arch} signed-by=${docker_key}] https://download.docker.com/linux/${DISTRO} ${codename} stable"
  add_apt_source "docker" "$docker_list" "$docker_key" "https://download.docker.com/linux/${DISTRO}/gpg"
  apt_update_if_needed
  apt_install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  sudo usermod -aG docker "${USER}"
}

### ───────────────────────  AZURE CLI  ────────────────────────
install_azure_cli() {
  if need_cmd az; then return; fi
  local az_key="/etc/apt/keyrings/microsoft.gpg"
  local az_list="deb [arch=$(dpkg --print-architecture) signed-by=${az_key}] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main"
  add_apt_source "azure-cli" "$az_list" "$az_key" "https://packages.microsoft.com/keys/microsoft.asc"
  apt_update_if_needed
  apt_install azure-cli
}

### ─────────────────────────  WRK  ────────────────────────────
install_wrk() {
  if need_cmd wrk; then return; fi
  if apt-cache show wrk >/dev/null 2>&1; then
    apt_install wrk
  else
    local tmp_dir; tmp_dir="$(mktemp -d)"
    git clone --depth 1 https://github.com/wg/wrk.git "$tmp_dir/wrk"
    (cd "$tmp_dir/wrk" && make -j"$(nproc)")
    sudo cp "$tmp_dir/wrk/wrk" /usr/local/bin/
    rm -rf "$tmp_dir"
  fi
}

### ───────────────────────  NEOVIM  ───────────────────────────
install_neovim() {
  if need_cmd nvim; then return; fi
  log "Installing latest stable Neovim..."
  local arch
  case "$(uname -m)" in
    x86_64) arch="x86_64" ;;
    aarch64) arch="arm64" ;;
    *) error "Unsupported arch for Neovim"; return 1 ;;
  esac
  local latest_release url tmp_tar
  latest_release="$(curl -fsSL "https://api.github.com/repos/neovim/neovim/releases" \
    | jq -r '.[] | select(.prerelease == false) | .tag_name' | head -n1)"
  url="https://github.com/neovim/neovim/releases/download/${latest_release}/nvim-linux-${arch}.tar.gz"
  tmp_tar="$(mktemp --suffix .tar.gz)"
  if curl -fsSL "$url" -o "$tmp_tar"; then
    sudo tar -xzf "$tmp_tar" -C /opt/
    sudo ln -sf "/opt/nvim-linux-${arch}/bin/nvim" /usr/local/bin/nvim
  else
    error "Failed to download Neovim archive"
    rm -f "$tmp_tar"
    return 1
  fi
  rm -f "$tmp_tar"
}

### ─────────────────────────  FINALIZE  ───────────────────────
finalize() {
  local zsh_path
  zsh_path="$(command -v zsh)"

  if [ "${SHELL:-}" != "$zsh_path" ]; then
    if chsh -s "$zsh_path"; then
      log "Default shell changed to zsh."
    else
      warn "Couldn't change default shell. Try: sudo chsh -s \"$zsh_path\" \"$USER\""
    fi
  fi

  if is_wsl2; then
    log "Applying WSL2 locale configuration"
    if ! locale -a 2>/dev/null | grep -q "en_US.utf8"; then
      grep -qxF 'en_US.UTF-8 UTF-8' /etc/locale.gen || \
        echo 'en_US.UTF-8 UTF-8' | sudo tee -a /etc/locale.gen >/dev/null
      sudo locale-gen
    fi
    if ! grep -qxF 'LANG=en_US.UTF-8' /etc/default/locale 2>/dev/null; then
      echo 'LANG=en_US.UTF-8' | sudo tee /etc/default/locale >/dev/null
    fi
  fi

  log "Cleaning up apt caches and removing unnecessary packages"
  sudo apt autoremove -y
  sudo apt autoclean -y || true
  sudo apt-get clean -y || true
}

### ─────────────────────────  MAIN  ───────────────────────────
main() {
  require_sudo
  detect_distro
  install_apt_basics
  symlink_dotfiles
  install_nerd_font
  setup_zsh
  install_node
  install_rust
  install_python_tools
  install_go
  install_zig
  install_deno
  install_docker
  install_azure_cli
  install_wrk
  install_neovim
  finalize
  log "All done! Reboot or log out/in to pick up shell & group changes."
}

main "$@"
